/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArticuloTecnicoService } from "../articuloTecnico.service";
import { ArticuloTecnicoCreateInput } from "./ArticuloTecnicoCreateInput";
import { ArticuloTecnico } from "./ArticuloTecnico";
import { ArticuloTecnicoFindManyArgs } from "./ArticuloTecnicoFindManyArgs";
import { ArticuloTecnicoWhereUniqueInput } from "./ArticuloTecnicoWhereUniqueInput";
import { ArticuloTecnicoUpdateInput } from "./ArticuloTecnicoUpdateInput";

export class ArticuloTecnicoControllerBase {
  constructor(protected readonly service: ArticuloTecnicoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ArticuloTecnico })
  async createArticuloTecnico(
    @common.Body() data: ArticuloTecnicoCreateInput
  ): Promise<ArticuloTecnico> {
    return await this.service.createArticuloTecnico({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ArticuloTecnico] })
  @ApiNestedQuery(ArticuloTecnicoFindManyArgs)
  async articuloTecnicos(
    @common.Req() request: Request
  ): Promise<ArticuloTecnico[]> {
    const args = plainToClass(ArticuloTecnicoFindManyArgs, request.query);
    return this.service.articuloTecnicos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ArticuloTecnico })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async articuloTecnico(
    @common.Param() params: ArticuloTecnicoWhereUniqueInput
  ): Promise<ArticuloTecnico | null> {
    const result = await this.service.articuloTecnico({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ArticuloTecnico })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArticuloTecnico(
    @common.Param() params: ArticuloTecnicoWhereUniqueInput,
    @common.Body() data: ArticuloTecnicoUpdateInput
  ): Promise<ArticuloTecnico | null> {
    try {
      return await this.service.updateArticuloTecnico({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ArticuloTecnico })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArticuloTecnico(
    @common.Param() params: ArticuloTecnicoWhereUniqueInput
  ): Promise<ArticuloTecnico | null> {
    try {
      return await this.service.deleteArticuloTecnico({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
