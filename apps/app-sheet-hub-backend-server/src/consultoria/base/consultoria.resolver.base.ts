/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Consultoria } from "./Consultoria";
import { ConsultoriaCountArgs } from "./ConsultoriaCountArgs";
import { ConsultoriaFindManyArgs } from "./ConsultoriaFindManyArgs";
import { ConsultoriaFindUniqueArgs } from "./ConsultoriaFindUniqueArgs";
import { DeleteConsultoriaArgs } from "./DeleteConsultoriaArgs";
import { ConsultoriaService } from "../consultoria.service";
@graphql.Resolver(() => Consultoria)
export class ConsultoriaResolverBase {
  constructor(protected readonly service: ConsultoriaService) {}

  async _consultoriasMeta(
    @graphql.Args() args: ConsultoriaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Consultoria])
  async consultorias(
    @graphql.Args() args: ConsultoriaFindManyArgs
  ): Promise<Consultoria[]> {
    return this.service.consultorias(args);
  }

  @graphql.Query(() => Consultoria, { nullable: true })
  async consultoria(
    @graphql.Args() args: ConsultoriaFindUniqueArgs
  ): Promise<Consultoria | null> {
    const result = await this.service.consultoria(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Consultoria)
  async deleteConsultoria(
    @graphql.Args() args: DeleteConsultoriaArgs
  ): Promise<Consultoria | null> {
    try {
      return await this.service.deleteConsultoria(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
