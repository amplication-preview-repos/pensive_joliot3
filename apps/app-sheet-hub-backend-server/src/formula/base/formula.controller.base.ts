/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FormulaService } from "../formula.service";
import { FormulaCreateInput } from "./FormulaCreateInput";
import { Formula } from "./Formula";
import { FormulaFindManyArgs } from "./FormulaFindManyArgs";
import { FormulaWhereUniqueInput } from "./FormulaWhereUniqueInput";
import { FormulaUpdateInput } from "./FormulaUpdateInput";

export class FormulaControllerBase {
  constructor(protected readonly service: FormulaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Formula })
  async createFormula(
    @common.Body() data: FormulaCreateInput
  ): Promise<Formula> {
    return await this.service.createFormula({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Formula] })
  @ApiNestedQuery(FormulaFindManyArgs)
  async formulas(@common.Req() request: Request): Promise<Formula[]> {
    const args = plainToClass(FormulaFindManyArgs, request.query);
    return this.service.formulas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Formula })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async formula(
    @common.Param() params: FormulaWhereUniqueInput
  ): Promise<Formula | null> {
    const result = await this.service.formula({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Formula })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFormula(
    @common.Param() params: FormulaWhereUniqueInput,
    @common.Body() data: FormulaUpdateInput
  ): Promise<Formula | null> {
    try {
      return await this.service.updateFormula({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Formula })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFormula(
    @common.Param() params: FormulaWhereUniqueInput
  ): Promise<Formula | null> {
    try {
      return await this.service.deleteFormula({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
