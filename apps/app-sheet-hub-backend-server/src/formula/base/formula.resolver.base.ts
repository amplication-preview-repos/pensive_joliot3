/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Formula } from "./Formula";
import { FormulaCountArgs } from "./FormulaCountArgs";
import { FormulaFindManyArgs } from "./FormulaFindManyArgs";
import { FormulaFindUniqueArgs } from "./FormulaFindUniqueArgs";
import { DeleteFormulaArgs } from "./DeleteFormulaArgs";
import { FormulaService } from "../formula.service";
@graphql.Resolver(() => Formula)
export class FormulaResolverBase {
  constructor(protected readonly service: FormulaService) {}

  async _formulasMeta(
    @graphql.Args() args: FormulaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Formula])
  async formulas(
    @graphql.Args() args: FormulaFindManyArgs
  ): Promise<Formula[]> {
    return this.service.formulas(args);
  }

  @graphql.Query(() => Formula, { nullable: true })
  async formula(
    @graphql.Args() args: FormulaFindUniqueArgs
  ): Promise<Formula | null> {
    const result = await this.service.formula(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Formula)
  async deleteFormula(
    @graphql.Args() args: DeleteFormulaArgs
  ): Promise<Formula | null> {
    try {
      return await this.service.deleteFormula(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
