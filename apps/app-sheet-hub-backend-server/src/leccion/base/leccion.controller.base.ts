/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LeccionService } from "../leccion.service";
import { LeccionCreateInput } from "./LeccionCreateInput";
import { Leccion } from "./Leccion";
import { LeccionFindManyArgs } from "./LeccionFindManyArgs";
import { LeccionWhereUniqueInput } from "./LeccionWhereUniqueInput";
import { LeccionUpdateInput } from "./LeccionUpdateInput";

export class LeccionControllerBase {
  constructor(protected readonly service: LeccionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Leccion })
  async createLeccion(
    @common.Body() data: LeccionCreateInput
  ): Promise<Leccion> {
    return await this.service.createLeccion({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Leccion] })
  @ApiNestedQuery(LeccionFindManyArgs)
  async leccions(@common.Req() request: Request): Promise<Leccion[]> {
    const args = plainToClass(LeccionFindManyArgs, request.query);
    return this.service.leccions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Leccion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async leccion(
    @common.Param() params: LeccionWhereUniqueInput
  ): Promise<Leccion | null> {
    const result = await this.service.leccion({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Leccion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLeccion(
    @common.Param() params: LeccionWhereUniqueInput,
    @common.Body() data: LeccionUpdateInput
  ): Promise<Leccion | null> {
    try {
      return await this.service.updateLeccion({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Leccion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLeccion(
    @common.Param() params: LeccionWhereUniqueInput
  ): Promise<Leccion | null> {
    try {
      return await this.service.deleteLeccion({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
