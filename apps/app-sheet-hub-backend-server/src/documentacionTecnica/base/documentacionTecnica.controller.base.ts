/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocumentacionTecnicaService } from "../documentacionTecnica.service";
import { DocumentacionTecnicaCreateInput } from "./DocumentacionTecnicaCreateInput";
import { DocumentacionTecnica } from "./DocumentacionTecnica";
import { DocumentacionTecnicaFindManyArgs } from "./DocumentacionTecnicaFindManyArgs";
import { DocumentacionTecnicaWhereUniqueInput } from "./DocumentacionTecnicaWhereUniqueInput";
import { DocumentacionTecnicaUpdateInput } from "./DocumentacionTecnicaUpdateInput";

export class DocumentacionTecnicaControllerBase {
  constructor(protected readonly service: DocumentacionTecnicaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DocumentacionTecnica })
  async createDocumentacionTecnica(
    @common.Body() data: DocumentacionTecnicaCreateInput
  ): Promise<DocumentacionTecnica> {
    return await this.service.createDocumentacionTecnica({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DocumentacionTecnica] })
  @ApiNestedQuery(DocumentacionTecnicaFindManyArgs)
  async documentacionTecnicas(
    @common.Req() request: Request
  ): Promise<DocumentacionTecnica[]> {
    const args = plainToClass(DocumentacionTecnicaFindManyArgs, request.query);
    return this.service.documentacionTecnicas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DocumentacionTecnica })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async documentacionTecnica(
    @common.Param() params: DocumentacionTecnicaWhereUniqueInput
  ): Promise<DocumentacionTecnica | null> {
    const result = await this.service.documentacionTecnica({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DocumentacionTecnica })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocumentacionTecnica(
    @common.Param() params: DocumentacionTecnicaWhereUniqueInput,
    @common.Body() data: DocumentacionTecnicaUpdateInput
  ): Promise<DocumentacionTecnica | null> {
    try {
      return await this.service.updateDocumentacionTecnica({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DocumentacionTecnica })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocumentacionTecnica(
    @common.Param() params: DocumentacionTecnicaWhereUniqueInput
  ): Promise<DocumentacionTecnica | null> {
    try {
      return await this.service.deleteDocumentacionTecnica({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
