/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Aplicacion as PrismaAplicacion } from "@prisma/client";

export class AplicacionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AplicacionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aplicacion.count(args);
  }

  async aplicacions(
    args: Prisma.AplicacionFindManyArgs
  ): Promise<PrismaAplicacion[]> {
    return this.prisma.aplicacion.findMany(args);
  }
  async aplicacion(
    args: Prisma.AplicacionFindUniqueArgs
  ): Promise<PrismaAplicacion | null> {
    return this.prisma.aplicacion.findUnique(args);
  }
  async createAplicacion(
    args: Prisma.AplicacionCreateArgs
  ): Promise<PrismaAplicacion> {
    return this.prisma.aplicacion.create(args);
  }
  async updateAplicacion(
    args: Prisma.AplicacionUpdateArgs
  ): Promise<PrismaAplicacion> {
    return this.prisma.aplicacion.update(args);
  }
  async deleteAplicacion(
    args: Prisma.AplicacionDeleteArgs
  ): Promise<PrismaAplicacion> {
    return this.prisma.aplicacion.delete(args);
  }
}
