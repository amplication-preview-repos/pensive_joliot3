/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AplicacionService } from "../aplicacion.service";
import { AplicacionCreateInput } from "./AplicacionCreateInput";
import { Aplicacion } from "./Aplicacion";
import { AplicacionFindManyArgs } from "./AplicacionFindManyArgs";
import { AplicacionWhereUniqueInput } from "./AplicacionWhereUniqueInput";
import { AplicacionUpdateInput } from "./AplicacionUpdateInput";

export class AplicacionControllerBase {
  constructor(protected readonly service: AplicacionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Aplicacion })
  async createAplicacion(
    @common.Body() data: AplicacionCreateInput
  ): Promise<Aplicacion> {
    return await this.service.createAplicacion({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Aplicacion] })
  @ApiNestedQuery(AplicacionFindManyArgs)
  async aplicacions(@common.Req() request: Request): Promise<Aplicacion[]> {
    const args = plainToClass(AplicacionFindManyArgs, request.query);
    return this.service.aplicacions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Aplicacion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aplicacion(
    @common.Param() params: AplicacionWhereUniqueInput
  ): Promise<Aplicacion | null> {
    const result = await this.service.aplicacion({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Aplicacion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAplicacion(
    @common.Param() params: AplicacionWhereUniqueInput,
    @common.Body() data: AplicacionUpdateInput
  ): Promise<Aplicacion | null> {
    try {
      return await this.service.updateAplicacion({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Aplicacion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAplicacion(
    @common.Param() params: AplicacionWhereUniqueInput
  ): Promise<Aplicacion | null> {
    try {
      return await this.service.deleteAplicacion({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
